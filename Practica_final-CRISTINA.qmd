---
title: "practica_final"
format: html
editor: visual
---

Vamos a utilizar el dataset de semillas que se encuentra aquí: https://archive.ics.uci.edu/ml/datasets/seeds#

Primero vamos a descargarnos el dataset con el siguiente comando:

```{r}
library(tidyverse)
df_seeds <- read.table('https://archive.ics.uci.edu/ml/machine-learning-databases/00236/seeds_dataset.txt', col.names =c('area','perimetro','compacto','longitud','anchura','coeficient.asimetria','longitud.ranura','tipo'))
```

#### PREGUNTA 1

¿Cuantas filas y cuantas columnas tiene el dataframe df_seeds?

**Respuesta**:

```{r}
dim(df_seeds)
```

#### PREGUNTA 2

Vamos a convertir en factor la columna tipo. Vamos a reemplazar los números por su correspondiente etiqueta (label). La correspondencia entre el código y el tipo es:

-   1 - Kama
-   2 - Rosa
-   3 - Canadian

Convierte en factor la columna seeds, respetando las etiquetas:

**Respuesta**:

```{r}
df_seeds$tipo <- factor(df_seeds$tipo,labels=c("Kama", "Rosa", "Canadian"))
```

```{r}
class(df_seeds$tipo)
```

#### PREGUNTA 3

¿Cual es la media del area de cada uno de los tipos?

**Respuesta**

```{r}
df_seeds |> group_by(tipo) |> summarize(area_medio=mean(area))
```

#### PREGUNTA 4

¿Como se llama el siguiente tipo de gráfico?. ¿Qué representa la línea del centro de la caja?

```{r}
ggplot(df_seeds, aes(x=tipo, y=area)) + geom_boxplot()
```

**Respuesta**: El nombre del gráfico es "boxplot" o "diagrama de caja". La línia del centro de la caja representa la mediana de los valores. En este caso la mediana del area del tipo 1 es 14'38, la del tipo 2 18'75 y la del tipo 3 11'87.

#### PREGUNTA 5

¿Como pintarías un diagrama de puntos (o scatterplot) con ggplot con las siguientes características? - En el eje X la variable compacto - En el eje Y la variable area - Cada tipo de semilla debería tener un color diferente

**Respuesta**:

```{r}
library(ggplot2)
# Basic scatter plot
ggplot(df_seeds, aes(x=compacto, y=area)) + geom_point()
# Change the point size, and shape
sp<-ggplot(df_seeds, aes(x=compacto, y=area, color=tipo)) +
  geom_point(size=2, shape=18)

sp + scale_color_manual(values=c("aquamarine3", "antiquewhite3", "coral3"))
```

#### PREGUNTA 6

¿Qué hace la siguiente línea?:

```{r}
df_seeds |> mutate(is_kama = tipo=='Kama') -> df_seeds
```

**Respuesta**: Añade una columna llamada "is_kama" al dataframe con valores booleanos: TRUE cuando el tipo sea "kama" y FALSE cuando no.

```{r}
df_seeds
```

#### PREGUNTA 7

Vamos a dividir el conjunto de datos en test y training porque vamos a entrenar un modelo que me permita diferenciar si una semilla es de tipo Kama o no. ¿Por qué es aconsejable dividir el dataset en los grupos de train y test?

```{r}
set.seed(123) # Este set.seed hace que a todos nos generen los mismos número aleatorios
idx <- sample(1:nrow(df_seeds), 0.7*nrow(df_seeds))
df_seeds_train <- df_seeds[idx,]
df_seeds_test <- df_seeds[-idx,]
```

**Respuesta**: Cada vez que entrenamos un modelo de aprendizaje automático, no podemos entrenar ese modelo en un solo conjunto de datos porque entonces no podremos evaluar el rendimiento de nuestro modelo. Por ese motivo, dividimos nuestros datos de origen en conjuntos de datos de entrenamiento y prueba.

La división de train/test es una técnica para evaluar el rendimiento de un algoritmo de aprendizaje automático. El procedimiento consiste en tomar un conjunto de datos y dividirlo en dos subconjuntos. El primer subconjunto se utiliza para ajustar el modelo y entrenarlo, para hacer que el modelo aprenda las características/patrones ocultos en los datos, y se denomina conjunto de datos de entrenamiento (train). El segundo subconjunto no se usa para entrenar el modelo, es un conjunto separado de datos que se utiliza para probar el modelo después de completar el entrenamiento; el elemento de entrada del conjunto de datos se proporciona al modelo, luego se hacen predicciones y se comparan con los valores esperados. Este segundo conjunto de datos se denomina conjunto de datos de prueba (test).

#### PREGUNTA 8

Vamos a crear un modelo para realizar una clasificación binaria, donde le pasaremos como entrada las columnas: area, perimetro, compacto, longitud, coeficient.asimetria y longitud.ranura

¿Qué tipo de algoritmo o modelo debería usar?

**Respuesta**: Una regresión logística ya que estamos ante un problema de clasificación donde la salida será 0 o 1 y la distribución de la variable dependiente es binomial y no normal o gaussiana.

**PREGUNTA 9**

Crea un modelo que me permita clasificar si una semilla es de tipo Kama o no con las siguientes columnas: area, perimetro, compacto, longitud, coeficient.asimetria, longitud.ranura

**Respuesta**:

```{r}
df_seeds$is_kama<-factor(df_seeds$is_kama,labels = c("FALSE","TRUE"))
```

```{r}
df_seeds
```

```{r}
set.seed(123) # Este set.seed hace que a todos nos generen los mismos número aleatorios
idx <- sample(1:nrow(df_seeds), 0.7*nrow(df_seeds))
df_seeds_train <- df_seeds[idx,]
df_seeds_test <- df_seeds[-idx,]
```

```{r}
mylogit <- glm(is_kama ~ area + perimetro + compacto + longitud + coeficient.asimetria + longitud.ranura, data = df_seeds_train, family = "binomial")
summary(mylogit)
```

```{r}
library(ROCR)
options(repr.plot.height=4,repr.plot.width=6)
 

df_pred<-data.frame(pred=predict(mylogit,df_seeds_test,type="response"), 
                    real= df_seeds_test$is_kama)
df_pred<-na.omit(df_pred)

pr <- prediction(df_pred$pred, df_pred$real)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
```

```{r}
prf_auc=performance(pr, measure = "auc")
paste("The AUC is",prf_auc@y.values[[1]])
```

```{r}
library(caret)
library(e1071)

cf_m<-confusionMatrix(data=factor(predict(mylogit, df_seeds_test, type="response")>0.5,
                      labels=c("FALSE","TRUE")), 
                      reference=df_seeds_test$is_kama,
                      positive="TRUE")

cf_m
```

#### PREGUNTA 10

Si usamos un umbral de 0 en la salida del modelo (lo que equivale a probabilidad de 0.5 cuando usamos el predict con type='response') ¿Cuales son los valores de precisión y exhausitividad?

**Respuesta**.

```{r}
umbral<- 0
seeds_pred  <-predict(mylogit,df_seeds_test)

df_preds<-data.frame(pred=seeds_pred,
                     tipo_pred=factor(ifelse(seeds_pred < umbral,0,1),labels=c("FALSE","TRUE")),
                     tipo_real=df_seeds_test$is_kama)
df_preds<-df_preds[order(df_preds$pred, decreasing=FALSE),]

M<-table(df_preds$tipo_real,df_preds$tipo_pred)
 #table(real=radar.test$tipo,elegimos=y_est)

#Recall, Exhaustividad, Tasa Verdadero positivo
truePositive<-M[2,2]/(M[2,2]+M[2,1]) 

#Tasa Falso positivo
falsePositive<-M[1,2]/(M[1,2]+M[1,1])
paste("tp:",truePositive,"  fp:",falsePositive)
M

df_preds
```

```{r}
paste("La precisión es:",cf_m$table[2,2]/sum(cf_m$table[2,]))
paste("La exhaustividad (recall, sensitivity) es:",cf_m$table[2,2]/sum(cf_m$table[,2]))
paste("La exactitud (accuracy) es:",(cf_m$table[2,2]+cf_m$table[1,1])/sum(cf_m$table))

bnt_test=binom.test(cf_m$table[2,2]+cf_m$table[1,1],sum(cf_m$table))
paste("El intervalo de confianza de la exactitud es: [",paste0(bnt_test$conf.int,collapse=","),"]")
```

#### PREGUNTA 11

¿Qué están haciendo las siguientes líneas?

```{r}
set.seed(123)
cl<-df_seeds |> select(area,perimetro,compacto,longitud,anchura,coeficient.asimetria,longitud.ranura) |> kmeans(3)
table(real=df_seeds$tipo,cluster=cl$cluster)
```

**Respuesta**: Se está utilizando el operador (\|\>) para encadenar (hacer una pipeline) una serie de operaciones en el dataset "df_seeds". La primera operación es la función select(): seleccionamos columnas específicas del dataset: "area", "perimetro", "compacto", "longitud", "anchura", "coeficient.asimetria" y "longitud.ranura" .

A continuación, con la función kmeans() realizamos la agrupación en 3 clústeres (ya que le hemos especificado 3 a kmeans) en las columnas seleccionadas. El resultado se almacena en el objeto "cl".

Finalmente, la función table() se usa para crear una tabla que compara las etiquetas de clase reales (las que tenemos en la columna "tipo" de df_seeds) con las asignaciones de clúster hechas por la función kmeans (almacenadas en la columna "cluster" del objeto "cl").
